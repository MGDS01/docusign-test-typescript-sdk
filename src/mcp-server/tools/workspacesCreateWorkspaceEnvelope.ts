/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { workspacesCreateWorkspaceEnvelope } from "../../funcs/workspacesCreateWorkspaceEnvelope.js";
import * as operations from "../../models/operations/index.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  request: operations.CreateWorkspaceEnvelopeRequest$inboundSchema,
};

export const tool$workspacesCreateWorkspaceEnvelope: ToolDefinition<
  typeof args
> = {
  name: "workspaces-create-workspace-envelope",
  description:
    `Creates an envelope with the given documents. Returns the ID of the created envelope

This operation creates an envelope associated with the workspace. Using the \`envelope_id\` from the response, eSignature APIs may be utilized to modify the envelope and ultimately send it.

Envelope recipients will automatically be granted Participate access to the workspace. Envelope recipients will receive consolidated notifications from Docusign Workspaces rather than standard individual envelope notifications.

Docusign Connect events may be utilized to receive updates to individual envelope events.

The \`envelopes\` operation on the workspace may be utilized to query the status of all the envelopes in the workspace.

When \`document_ids\` is empty or excluded, the envelope is created without any documents from the workspace. eSignature API calls, including adding documents and templates, may be utilized to modify the envelope before it is sent. The eSignature API must be utilized to send the envelope.`,
  args,
  tool: async (client, args, ctx) => {
    const [result, apiCall] = await workspacesCreateWorkspaceEnvelope(
      client,
      args.request,
      { fetchOptions: { signal: ctx.signal } },
    ).$inspect();

    if (!result.ok) {
      return {
        content: [{ type: "text", text: result.error.message }],
        isError: true,
      };
    }

    const value = result.value;

    return formatResult(value, apiCall);
  },
};
