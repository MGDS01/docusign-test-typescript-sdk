/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { workspacesGetWorkspaces } from "../../funcs/workspacesGetWorkspaces.js";
import * as operations from "../../models/operations/index.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  request: operations.GetWorkspacesRequest$inboundSchema,
};

export const tool$workspacesGetWorkspaces: ToolDefinition<typeof args> = {
  name: "workspaces-get-workspaces",
  description: `Gets workspaces available to the calling user

This operation retrieves a list of workspaces available to the calling user. It returns basic information about each workspace, including its unique identifier (ID), name, and metadata such as when it was created and by whom.

Pagination is supported by passing \`start_position\` and \`count\` in the request. The response will include \`resultSetSize\`, \`start_position\`, and \`end_position\` which may be utilized for subsequent requests.`,
  args,
  tool: async (client, args, ctx) => {
    const [result, apiCall] = await workspacesGetWorkspaces(
      client,
      args.request,
      { fetchOptions: { signal: ctx.signal } },
    ).$inspect();

    if (!result.ok) {
      return {
        content: [{ type: "text", text: result.error.message }],
        isError: true,
      };
    }

    const value = result.value;

    return formatResult(value, apiCall);
  },
};
