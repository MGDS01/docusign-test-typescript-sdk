/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { workspaceDocumentsGetWorkspaceDocuments } from "../../funcs/workspaceDocumentsGetWorkspaceDocuments.js";
import * as operations from "../../models/operations/index.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  request: operations.GetWorkspaceDocumentsRequest$inboundSchema,
};

export const tool$workspaceDocumentsGetWorkspaceDocuments: ToolDefinition<
  typeof args
> = {
  name: "workspace-documents-get-workspace-documents",
  description: `Get documents in the workspace accessible to the calling user

This operation retrieves the documents in the workspace that are accessible to the calling user. Documents may be added directly or automatically through tasks such as envelopes. Documents may be used to create envelopes.

Pagination is supported by passing \`start_position\` and \`count\` in the request. The response will include \`resultSetSize\`, \`start_position\`, and \`end_position\` which may be utilized for subsequent requests.`,
  args,
  tool: async (client, args, ctx) => {
    const [result, apiCall] = await workspaceDocumentsGetWorkspaceDocuments(
      client,
      args.request,
      { fetchOptions: { signal: ctx.signal } },
    ).$inspect();

    if (!result.ok) {
      return {
        content: [{ type: "text", text: result.error.message }],
        isError: true,
      };
    }

    const value = result.value;

    return formatResult(value, apiCall);
  },
};
