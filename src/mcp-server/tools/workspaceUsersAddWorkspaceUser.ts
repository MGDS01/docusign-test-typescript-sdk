/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { workspaceUsersAddWorkspaceUser } from "../../funcs/workspaceUsersAddWorkspaceUser.js";
import * as operations from "../../models/operations/index.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  request: operations.AddWorkspaceUserRequest$inboundSchema,
};

export const tool$workspaceUsersAddWorkspaceUser: ToolDefinition<typeof args> =
  {
    name: "workspace-users-add-workspace-user",
    description: `Adds a user to the workspace by email address

This operation manually adds an internal or external user to a specific workspace by email address. Users within the account are considered "Internal" and may be assigned any role. Users outside the account are considered "External" and may only be assigned the Participate role. This operation is not typically needed for adding external participants to a Workspace as they will be automatically added as tasks are assigned.

Available role IDs can be retrieved via the Assignable Roles operation on a workspace. If the \`role_id\` is not passed, the user is added with the Participate role.`,
    args,
    tool: async (client, args, ctx) => {
      const [result, apiCall] = await workspaceUsersAddWorkspaceUser(
        client,
        args.request,
        { fetchOptions: { signal: ctx.signal } },
      ).$inspect();

      if (!result.ok) {
        return {
          content: [{ type: "text", text: result.error.message }],
          isError: true,
        };
      }

      const value = result.value;

      return formatResult(value, apiCall);
    },
  };
