/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { workspaceUsersGetWorkspaceUsers } from "../../funcs/workspaceUsersGetWorkspaceUsers.js";
import * as operations from "../../models/operations/index.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  request: operations.GetWorkspaceUsersRequest$inboundSchema,
};

export const tool$workspaceUsersGetWorkspaceUsers: ToolDefinition<typeof args> =
  {
    name: "workspace-users-get-workspace-users",
    description: `Retrieves the list of users in the given workspace

This operations retrieves the users in a workspace. Users sent envelopes or assigned tasks will automatically be added to the workspace with the Participate role.

Pagination is supported by passing \`start_position\` and \`count\` in the request. The response will include \`resultSetSize\`, \`start_position\`, and \`end_position\` which may be utilized for subsequent requests.`,
    args,
    tool: async (client, args, ctx) => {
      const [result, apiCall] = await workspaceUsersGetWorkspaceUsers(
        client,
        args.request,
        { fetchOptions: { signal: ctx.signal } },
      ).$inspect();

      if (!result.ok) {
        return {
          content: [{ type: "text", text: result.error.message }],
          isError: true,
        };
      }

      const value = result.value;

      return formatResult(value, apiCall);
    },
  };
