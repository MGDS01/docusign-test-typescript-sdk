/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { workspaceDocumentsDeleteWorkspaceDocument } from "../funcs/workspaceDocumentsDeleteWorkspaceDocument.js";
import { workspaceDocumentsGetWorkspaceDocument } from "../funcs/workspaceDocumentsGetWorkspaceDocument.js";
import { workspaceDocumentsGetWorkspaceDocumentContents } from "../funcs/workspaceDocumentsGetWorkspaceDocumentContents.js";
import { workspaceDocumentsGetWorkspaceDocuments } from "../funcs/workspaceDocumentsGetWorkspaceDocuments.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class WorkspaceDocuments extends ClientSDK {
  /**
   * Get documents in the workspace accessible to the calling user
   *
   * @remarks
   * This operation retrieves the documents in the workspace that are accessible to the calling user. Documents may be added directly or automatically through tasks such as envelopes. Documents may be used to create envelopes.
   *
   * Pagination is supported by passing `start_position` and `count` in the request. The response will include `resultSetSize`, `start_position`, and `end_position` which may be utilized for subsequent requests.
   */
  async getWorkspaceDocuments(
    request: operations.GetWorkspaceDocumentsRequest,
    options?: RequestOptions,
  ): Promise<components.GetWorkspaceDocumentsResponse> {
    return unwrapAsync(workspaceDocumentsGetWorkspaceDocuments(
      this,
      request,
      options,
    ));
  }

  /**
   * Get information about the document
   *
   * @remarks
   * This operation retrieves information about the document. The response includes the document ID, name, and metadata.
   */
  async getWorkspaceDocument(
    request: operations.GetWorkspaceDocumentRequest,
    options?: RequestOptions,
  ): Promise<components.GetWorkspaceDocumentResponse> {
    return unwrapAsync(workspaceDocumentsGetWorkspaceDocument(
      this,
      request,
      options,
    ));
  }

  /**
   * Deletes a document in the workspace
   *
   * @remarks
   * This operation permanently deletes a document by ID.
   */
  async deleteWorkspaceDocument(
    request: operations.DeleteWorkspaceDocumentRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(workspaceDocumentsDeleteWorkspaceDocument(
      this,
      request,
      options,
    ));
  }

  /**
   * Get the file contents of the document
   *
   * @remarks
   * This operation retrieves the file contents of the document. The file is returned as a stream in the response body. The Content-Disposition response header contains the document name as the `filename`.
   */
  async getWorkspaceDocumentContents(
    request: operations.GetWorkspaceDocumentContentsRequest,
    options?: RequestOptions,
  ): Promise<ReadableStream<Uint8Array>> {
    return unwrapAsync(workspaceDocumentsGetWorkspaceDocumentContents(
      this,
      request,
      options,
    ));
  }
}
